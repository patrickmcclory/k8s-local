#cloud-config
ssh_authorized_keys:
  - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDvaKhzN7tqXdATJqpCqtk0T77ResjteJFldyerpTNJg3BBiYLrSki0rJJN50pIDTclciEWXRsUKBVrXu7b0NW+oP2LsQsQ0jodtvuxk/HQLUhVOVrf46E//oXI+66mg/Nkw0ZcGmZodXAZ73ec3YwJxBnMupBnu2gDVpIQtMRYZs49IVaQfPatzvhk2dwPIvNGoz+F+Bys3swdlc//sXpI+rYf03TsGoTQFb1AXyLx9Sn56ap4I5DHT5lkeegTJOMPA/E8VOo2eOHla95iY9gejG/v4BZgWyVRNOUw+JRgwGfLxuHVoouW3wQnXhI4MhuV3iluSyujPU2TubIYQSTR patrick@pmdev-mac
write_files:
write_files:
  - path: /home/core/.kube/config
    owner: core
    permissions: 0600
    content: |
      apiVersion: v1
      clusters:
      - cluster:
          certificate-authority: /etc/kubernetes/ssl/ca.pem
          server: https://172.16.16.10
        name: default-cluster
      contexts:
      - context:
          cluster: default-cluster
          user: default-admin
        name: default-system
      current-context: default-system
      kind: Config
      preferences: {}
      users:
      - name: default-admin
        user:
          client-certificate: /etc/kubernetes/ssl/worker.pem
          client-key: /etc/kubernetes/ssl/worker-key.pem
  - path: /opt/bin/waiter.sh
    permissions: 0755
    owner: root
    content: |
      #! /usr/bin/bash
      echo 'Waiting for api service on 8080'
      until $(curl --output /dev/null --silent --head --fail http://localhost:8080); do  printf '.'; sleep 5; done
      echo ''
      echo 'Done waiting for api service on 8080'
coreos:
  etcd2:
    name: dev-01
    initial-cluster: dev-01=http://172.16.16.10:2380 #,dev-02=http://172.16.16.20:2380,dev-03=http://172.16.16.30:2380,dev-04=http://172.16.16.40:2380,dev-05=http://172.16.16.50:2380,dev-06=http://172.16.16.60:2380,dev-07=http://172.16.16.70:2380
    initial-cluster-state: new
    advertise-client-urls: http://172.16.16.10:2379,http://172.16.16.10:4001
    initial-advertise-peer-urls: http://172.16.16.10:2380
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
    listen-peer-urls: http://172.16.16.10:2380,http://172.16.16.10:7001
  update:
    reboot-strategy: off
  fleet:
    metadata: kubernetes_role=master
    public_ip: 172.16.16.10
    etcd_servers: http://127.0.0.1:2379
  flannel:
    etcd_endpoints: http://127.0.0.1:2379
    ip_masq: true
    interface: 172.16.16.10
    public_ip: 172.16.16.10
  units:
    - name: download-release.service
      command: start
      content: |
        [Unit]
        Description=Downloads Kubernetes Release
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/bin/mkdir -p /opt/bin
        ExecStart=/usr/bin/wget -q http://172.16.16.3/k8s/v1.4.5/kubernetes-server-linux-amd64.tar.gz -O /tmp/kubernetes.tar.gz
        ExecStart=/usr/bin/tar xvf /tmp/kubernetes.tar.gz -C /opt/
        ExecStart=/usr/bin/rm -rf /tmp/kubernetes.tar.gz
        ExecStart=/usr/bin/mv /opt/kubernetes/server/bin/kubectl /opt/bin/kubectl
        ExecStart=/usr/bin/chmod +rx /opt/bin/kubectl
    - name: copy-serviceaccount-key.service
      command: start
      content: |
        [Unit]
        Description=Gather k8s keys
        [Service]
        ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/ssl
        ExecStart=/usr/bin/wget http://172.16.16.3/keys/ca.pem -P /etc/kubernetes/ssl/
        ExecStart=/usr/bin/wget http://172.16.16.3/keys/apiserver.pem -P /etc/kubernetes/ssl/
        ExecStart=/usr/bin/wget http://172.16.16.3/keys/apiserver-key.pem -P /etc/kubernetes/ssl/
        ExecStart=/usr/bin/wget http://172.16.16.3/keys/dev-01.lab.mcclory.io-worker.pem -O /etc/kubernetes/ssl/worker.pem
        ExecStart=/usr/bin/wget http://172.16.16.3/keys/dev-01.lab.mcclory.io-worker-key.pem -O /etc/kubernetes/ssl/worker-key.pem
        ExecStart=/usr/bin/chown root:root /etc/kubernetes/ssl/worker-key.pem
        ExecStart=/usr/bin/chmod +r /etc/kubernetes/ssl/worker-key.pem
        ExecStart=/usr/bin/chmod 700 /etc/kubernetes/ssl/apiserver-key.pem
        ExecStart=/usr/bin/chown root:root /etc/kubernetes/ssl/apiserver-key.pem
        RemainAfterExit=yes
        Type=oneshot
    - name: etcd2.service
      command: start
    - name: fleet.service
      command: start
    - name: configure-network-etcd2.service
      command: start
      content: |
        [Unit]
        Description=Sets etcd values for coreos and flannel networking
        After=etcd2.service
        Requires=etcd2.service
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/bin/curl -X PUT -d "value={\"Network\":\"10.2.0.0/16\",\"Backend\":{\"Type\":\"vxlan\"}}" "http://172.16.16.10:2379/v2/keys/coreos.com/network/config"
    - name: flanneld.service
      command: start
      drop-ins:
        - name: 40-configure-network-etcd2
          content: |
            [Unit]
            Requires=configure-network-etcd2.service
            After=configure-network-etcd2.service
    - name: docker.service
      command: start
      drop-ins:
        - name: 40-flannel-and-var-lib-docker
          content: |
            [Unit]
            Requires=flanneld.service
            Requires=var-lib-docker.mount
            After=flanneld.service
            After=var-lib-docker.mount
    - name: format-ephemeral.service
      command: start
      content: |
        [Unit]
        Description=Formats the ephemeral drive
        After=dev-sda.device
        Requires=dev-sda.device
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStartPre=/usr/bin/mkdir -p /media/ephemeral
        ExecStart=/usr/sbin/wipefs -a /dev/sda
        ExecStartPost=/usr/sbin/mkfs.btrfs -f /dev/sda
        ExecStartPost=/usr/bin/mount -t btrfs /dev/sda /media/ephemeral
    - name: media-ephemeral.mount
      command: start
      content: |
        [Unit]
        Description=Mount ephemeral to /media/ephemeral
        Requires=format-ephemeral.service
        After=format-ephemeral.service
        [Mount]
        What=/dev/sda
        Where=/media/ephemeral
        Type=btrfs
    - name: docker-storage.service
      command: start
      content: |
        [Unit]
        Requires=format-ephemeral.service
        Description=Mount ephemeral as /var/lib/docker
        [Service]
        Type=oneshot
        ExecStartPre=/usr/bin/systemctl stop docker
        ExecStartPre=/usr/bin/rm -rf /var/lib/docker/*
        ExecStart=/usr/bin/mkdir -p /media/ephemeral/docker
        ExecStart=/usr/bin/mkdir -p /var/lib/docker
        ExecStartPost=/usr/bin/mount -o bind /media/ephemeral/docker /var/lib/docker
        ExecStartPost=/usr/bin/systemctl start --no-block docker
    - name: kubelet.service
      command: start
      content: |
        [Service]
        ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests
        ExecStartPre=/usr/bin/mkdir -p /var/log/containers

        ExecStartPre=/usr/bin/wget http://172.16.16.3/coreos/master/kube-apiserver.yaml -O /etc/kubernetes/manifests/kube-apiserver.yaml
        ExecStartPre=/usr/bin/wget http://172.16.16.3/coreos/master/kube-controller-manager.yaml -O /etc/kubernetes/manifests/kube-controller-manager.yaml
        ExecStartPre=/usr/bin/wget http://172.16.16.3/coreos/master/kube-proxy.yaml -O /etc/kubernetes/manifests/kube-proxy.yaml
        ExecStartPre=/usr/bin/wget http://172.16.16.3/coreos/master/kube-scheduler.yaml -O /etc/kubernetes/manifests/kube-scheduler.yaml

        Environment=KUBELET_VERSION=v1.4.5_coreos.0
        Environment="RKT_OPTS=--volume var-log,kind=host,source=/var/log \
          --mount volume=var-log,target=/var/log \
          --volume dns,kind=host,source=/etc/resolv.conf \
          --mount volume=dns,target=/etc/resolv.conf"

        ExecStart=/usr/lib/coreos/kubelet-wrapper \
          --api-servers=http://127.0.0.1:8080 \
          --register-schedulable=false \
          --allow-privileged=true \
          --config=/etc/kubernetes/manifests \
          --hostname-override=172.16.16.10 \
          --cluster-dns=10.3.0.10 \
          --cluster-domain=cluster.local
        Restart=always
        RestartSec=10
        [Install]
        WantedBy=multi-user.target
